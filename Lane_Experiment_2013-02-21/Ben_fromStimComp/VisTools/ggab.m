function A = ggab(n, f, bw, p, c, cal, r, a, rw)%% GGAB makes a 2D gabor function.%%	GGAB(N) makes an NxN gabor w/ defaults%	GGAB(N,F,BW) makes the Gabor with center freq. F and bandwidth BW%	(F is in cpd and bw is full width at half height in octaves)%	GGAB(N,F,BW,P) shifts the carrier phase by p degrees%	GGAB(N,F,BW,P,C) set the contrast to c%	GGAB(N,F,BW,P,C,CAL) uses cal(1) and cal(2) as viewing distance in cm.%                           and monitor resolution in dpi%	GGAB(N,F,BW,P,C,CAL,R) rotates the gabor by r degrees%                           (requires image processing toolbox)%	GGAB(N,F,BW,P,C,CAL,R,A) sets the window's h/w ratio to a%	GGAB(N,F,BW,P,C,CAL,R,A,RW) rotates the window by rw degrees%                           (requires image processing toolbox)%     % see also: ddog, ggaus% % Lawrence K. Cormack% history:% 11/16/00  lkc Wrote it.% ?/?/??    lkc modified so that f is in cpd% ?/?/01	lkc changed arg 3 to bandwidth (rather than space constant)% 7/4/02    lkc Cleaned up the comments.%	%	changes:  -%	*** handle the input arguments.  Real code starts	***%	*** on line 80 										***if nargin == 0,	rw = 0;	a = 1;	r = 0;	cal = [57.3, 72];	c = 1;	p = 0;	bw = 1;	f = 3;	n = 256;elseif nargin == 1,	rw = 0;	a = 1;	r = 0;	cal = [57.3, 72];	c = 1;	p = 0;	bw = 1;	f = 3;elseif nargin == 2,	rw = 0;	a = 1;	r = 0;	cal = [57.3, 72];	c = 1;	p = 0;	bw = 1;elseif nargin == 3,	rw = 0;	a = 1;	r = 0;	cal = [57.3, 72];	c = 1;	p = 0;elseif nargin == 4,	rw = 0;	a = 1;	r = 0;	cal = [57.3, 72];	c = 1;elseif nargin == 5,	rw = 0;	a = 1;	r = 0;	cal = [57.3, 72];elseif nargin == 6,	rw = 0;	a = 1;	r = 0;elseif nargin == 7,	rw = 0;	a = 1;elseif nargin == 8,	rw = 0;elseif nargin == 9,	%do nothingelse	error('invalid input arguments');end	%	***  argument handlingif length(cal) < 2, cal = [57.3, 72]; end;%	*** do preliminary calcs based on arguments...degPerCm = r2d( 2.*atan(1./(2.* cal(1))));cmPerPix = 2.54 ./ cal(2);	gratfrq = degPerCm * cmPerPix * f; % convert to (cyc/pix) s = bw2sig(gratfrq, bw);p = p * pi/180;%	*** make the grating and rotate if necessary ...x = -n/2+.5:n/2-.5;y = c*sin(2*pi*gratfrq*x+p);B = buff2arr(y);if r ~= 0,	B = imrotate(B, r, 'bicubic', 'crop');end%	*** make the gaussian window ...G = ggaus(n, s, s./a, rw);	%	*** and make the gabor.A = 0.501 + 0.5*(B.*G);